package Lab00_Random_Testing;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
@SuppressWarnings({ "serial"})
public class Animation extends JFrame implements KeyListener {
	private static final int tilesize = 10;
	private static final int boardsize = 60;
	private static final int fps = 20;
	private static final int delay = 1000/fps;
	private static final int dem = tilesize*boardsize;
	private static final int speed = 1;
	private int size = 3;
	private boolean lose = false;
	private Timer t;
	ArrayList<Location> locations = new ArrayList<>();
	private int xloc, yloc, xv, yv, fx, fy, score;
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new Animation();
			}
		});
	}
	public Animation() {
		xloc = yloc = score = 0;
		xv = 1;
		setFood();
		this.setSize(tilesize*boardsize,tilesize*boardsize+100);
		this.addKeyListener(this);
		this.add(new Tile());
		this.setVisible(true);
		ActionListener refresh = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (e.getActionCommand().equals("timer")) {
					update();
					repaint();
				}
			}
		};
		locations.add(new Location(xloc,yloc));
		t = new Timer(delay, refresh);
		t.setActionCommand("timer");
		t.start();
	}
	public void update() {
		while (locations.size()>=size) {
			locations.remove(0);
		}
		for (int i = 0; i<locations.size(); i++) {
			Location l = locations.get(i);
			if (xloc == l.xl&& yloc == l.yl && locations.size()!=1) {
				lose = true;
				return;
			}
		}
		locations.add(new Location(xloc,yloc));
		xloc+=xv;
		yloc+=yv;
		for (int i = 0; i<locations.size(); i++) {
			Location l = locations.get(i);
			if (l.xl == fx && l.yl == fy) {
				setFood();
				size++;
				score++;
				break;
			}
		}
		if (xloc<0) {
			xloc = boardsize-1;
		}
		else if(xloc>boardsize-1) {
			xloc = 0;
		}
		if (yloc<0) {
			yloc = boardsize-1;
		}
		else if(yloc>boardsize-1) {
			yloc = 0;
		}
	}
	private void setFood() {
		boolean freeloc = false;
		Random r = new Random();
		while (!freeloc) {
			freeloc = true;
			fx = 5+r.nextInt(boardsize-5);
			fy = 5+r.nextInt(boardsize-5);
			for (int i = 0; i<locations.size(); i++) {
				Location l = locations.get(i);
				if (xloc == l.xl && yloc == l.yl) {
					freeloc = false;
					break;
				}
			}
		}
	}
	private class Tile extends JPanel {
		public void paintComponent(Graphics g) {
			g.setFont(new Font("Avenir",Font.BOLD, 60));
			g.setColor(Color.BLACK);
			g.fillRect(0, 0, dem, dem);
			g.drawString("Score: "+Integer.toString(score), 100, dem+60);
			g.setColor(Color.white);
			for (Location l: locations) {
				g.fillRect(l.xl*tilesize, l.yl*tilesize, tilesize-1, tilesize-1);
			}
			g.setColor(Color.yellow);
			g.fillRect(fx*tilesize, fy*tilesize, tilesize-1, tilesize-1);
			if (lose) {
				g.setColor(Color.white);
				g.drawString("You Lose", 300, 300);
			}
		}
	}
	@Override
	public void keyTyped(KeyEvent e) {

	}
	@Override
	public synchronized void keyPressed(KeyEvent e) {
		switch (e.getKeyCode()) {
		case 38: {
			if (yv!=speed) {
				xv = 0;
				yv = -speed;
			}
			break;
		}
		case 37: {
			if (xv!=speed) {
			yv = 0;
			xv = -speed;
			}
			break;
		}
		case 40: {
			if (yv!=-speed) {
			xv = 0;
			yv = speed;
		}
			break;
		}
		case 39: {
			if (xv!=-speed) {
			yv = 0;
			xv = speed;
			}
			break;
		}
		default: {
			if (lose) {
				locations.clear();
				lose = false;
				size = 3;
				score = 0;
			}
		}
		}
	}
	@Override
	public void keyReleased(KeyEvent e) {
	}
	private class Location {
		int xl, yl;
		public Location(int x, int y) {
			xl = x;
			yl = y;
		}
	}
}
