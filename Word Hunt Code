package Lab00_Random_Testing;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JPanel;
@SuppressWarnings({ "serial", "unused" })
public class WordHuntGUI extends WordHunt{
	public static JFrame frame = new JFrame("Word Hunt");
	public static void main(String[] args) {
		WordHuntGUI b = new WordHuntGUI();
	}
	public WordHuntGUI() {
		WordHunt w = new WordHunt();
		frame.addMouseListener(w);
		frame.setFocusable(true);
		frame.add(w);
		frame.setVisible(true);
		frame.setSize(800,1100);
		frame.setIgnoreRepaint(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	public static void quit() {
		frame.dispose();
		System.exit(0);
	}
}
@SuppressWarnings({"serial","static-access"})
class WordHunt extends JPanel implements MouseMotionListener, MouseListener {
	private static int SIZE = 4;
	private static char[][] board;
	private static Color LIGHT_GREY = new Color(70,70,70), ALMOST_WHITE = new Color(230,230,230);
	private boolean[][] used = new boolean[4][4];
	private ArrayList<String> solutions = new ArrayList<>(), words2 = new ArrayList<>(), words = new ArrayList<>();
	private ArrayList<int[]>places = new ArrayList<int[]>();
	private String word = "";
	private int numWords = 0, tested = 0, cscore = 0, x, y, xc, yc, l;
	private boolean fi = true, initialized = false, running = true, win = false;
	private int[] values = {100,400,800,1400,1700,2000,2300,2600,3000,3500,4000,4500,5000,6000}, mouseLoc = null;
	public WordHunt() {
		addMouseListener(this);
		addMouseMotionListener(this);
		this.board = new char[SIZE][SIZE];
		for (int r = 0; r < board.length; r++) {
			for (int c = 0; c < board.length; c++) {
				this.board[r][c] = (char)('a' + (int)(Math.random()*26));
			}
		}
	}
	public WordHunt(String a) {
		addMouseListener(this);
		addMouseMotionListener(this);
		this.board = new char[SIZE][SIZE];
		if (a.length()!=0) {
			int count = 0;
			for (int r = 0; r < board.length; r++) {
				for (int c = 0; c < board.length; c++) {
					board[r][c] = a.charAt(count);
					count++;
				}
			}
		}
		else {
			for (int r = 0; r < board.length; r++) {
				for (int c = 0; c < board.length; c++) {
					this.board[r][c] = (char)('a' + (int)(Math.random()*26));
				}
			}
		}
	}
	public void paint(Graphics g) {
		super.paint(g); 
		Graphics2D graphics2D = (Graphics2D) g;
		graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
				RenderingHints.VALUE_ANTIALIAS_ON); 
		graphics2D.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, 
				RenderingHints.VALUE_TEXT_ANTIALIAS_ON); 
		if (running) {
			run(g);
		} else if (win) {
			winGame(g);
		} else {
			endGame(g);
		}
	}
	private void winGame(Graphics g) {
		g.setColor(new Color(122,157,122));
		g.fillRect(0, 0, 800, 1100);
		g.setColor(new Color(230,230,230));
		g.fillRoundRect(350, 880, 100, 50,10,10);
		g.setColor(new Color(170,70,70));
		g.fillRoundRect(350, 1000, 100, 50,10,10);
		g.setColor(new Color(230,230,230));
		g.fillRoundRect(30, 180, 730, 660, 20, 20);
		g.setColor(LIGHT_GREY);
		g.setFont(new Font("Avenir", Font.BOLD,40));
		g.drawString("Back", 355, 920);
		g.drawString("Quit", 355, 1040);
		g.setFont(new Font("Avenir", Font.BOLD,25));
		int counter = 0, xa = 0;
		for (int i = 0; i<words.size(); i++) {
			counter++;
			if (counter>=25) {
				xa+=200;
				counter = 1;
			}
			if (solutions.contains(words.get(i))) {
				g.setColor(new Color(122,197,122));
				g.drawString(words.get(i), 50+xa, 200+counter*26);
				g.setColor(new Color(70,70,70));
			} else {
				g.drawString(words.get(i), 50+xa, 200+counter*26);
			}
		}
		g.setFont(new Font("Avenir", Font.BOLD,50));
		g.drawString("Solutions", 270, 150);
		g.setColor(new Color(122,157,122));
		g.fillRect(0, 0, 800, 160);
		g.setColor(new Color(70,70,70));
		g.setFont(new Font("Avenir", Font.BOLD,50));
		g.drawString("You Win!", 270, 150);
		g.setColor(new Color(170,130,130));
		g.fillRoundRect(320, 880, 160, 50,10,10);
		g.setColor(new Color(70,70,70));
		g.setFont(new Font("Avenir", Font.BOLD,30));
		g.drawString("Next Board", 323, 915);
		if ((xc>=350&&xc<=450)&&(yc>=1000&&yc<=1050)) {
			WordHuntGUI.quit();
		}
		if ((xc>=320&&xc<=320+160)&&(yc>=880&&yc<=930)) {
			win = false;
			running = true;
			solutions.clear();
			initialized = false;
			xc = 0; yc = 0;
			//repaint();
		}
	}
	private void endGame(Graphics g) {
		g.setColor(new Color(122,157,122));
		g.fillRect(0, 0, 800, 1100);
		g.setColor(new Color(230,230,230));
		g.fillRoundRect(350, 880, 100, 50,10,10);
		g.setColor(new Color(170,70,70));
		g.fillRoundRect(350, 1000, 100, 50,10,10);
		g.setColor(new Color(230,230,230));
		g.fillRoundRect(30, 180, 730, 660, 20, 20);
		g.setColor(LIGHT_GREY);
		g.setFont(new Font("Avenir", Font.BOLD,40));
		g.drawString("Back", 355, 920);
		g.drawString("Quit", 355, 1040);
		g.setFont(new Font("Avenir", Font.BOLD,25));
		int counter = 0, xa = 0;
		for (int i = 0; i<words.size(); i++) {
			counter++;
			if (counter>=25) {
				xa+=200;
				counter = 1;
			}
			if (solutions.contains(words.get(i))) {
				g.setColor(new Color(122,197,122));
				g.drawString(words.get(i), 50+xa, 200+counter*26);
				g.setColor(new Color(70,70,70));
			} else {
				g.drawString(words.get(i), 50+xa, 200+counter*26);
			}
		}
		g.setFont(new Font("Avenir", Font.BOLD,50));
		g.drawString("Solutions", 270, 150);
		if ((xc>=350&&xc<=450)&&(yc>=880&&yc<=930)) {
			running = true;
			repaint();
		}
		if ((xc>=350&&xc<=450)&&(yc>=1000&&yc<=1050)) {
			WordHuntGUI.quit();
		}
	}
	private boolean checkWin() {
		if (l == solutions.size()) {
			win = true;
			running = false;
			repaint();
			return true;
		}
		return false;
	}
	public void run(Graphics g) {	
		if (!initialized) {
			init();
			initialized = true;
		}
		setup(g);
		if (mouseLoc==null) {
			places.clear();
			this.testWord(g);
			if (!checkWin()) {
				for (int r = 0; r< board.length; r++) {
					for (int c = 0; c< board[r].length;c++) {
						drawTile(g,r,c,false);
					}
				}
			} else {
				return;
			}
		} else {
			boolean sped = false;
			for (int r = 0; r<4; r++) {
				for (int c = 0; c<4; c++) {
					int te = testWord(); 
					if (te==2) { 
						if ((x > 190+r*100&&x<170+r*100+95)&&(y>190+c*100&&y<170+c*100+95)||used[r][c]) {
							g.setColor(new Color(138,93,44));
							if (!used[r][c]) {
								word+=board[r][c];
								used[r][c] = true;
								sped = true;
								int[] temp = new int[2];
								temp[0] = 188+(r*100)+40;
								temp[1] = 188+(c*100)+40;
								places.add(temp);
							}
						} else {
							g.setColor(new Color(168,123,74));
						}
						if (sped) {
							g.setColor(new Color(138,93,44));
							drawTile(g,r,c,false);
							sped = false;
						} else {
							drawTile(g,r,c,false);
						}
					} else {
						if ((x > 190+r*100&&x<170+r*100+95)&&(y>190+c*100&&y<170+c*100+95)||used[r][c]) {
							if (!used[r][c]) {
								word+=board[r][c];
								used[r][c] = true;
								int[] temp = new int[2];
								temp[0] = 188+(r*100)+40;
								temp[1] = 188+(c*100)+40;
								places.add(temp);
							}
						}
						if (used[r][c]&&te == 0) {
							g.setColor(new Color(128,227,138));
						} else if (used[r][c]&&te == 1){
							g.setColor(new Color(200,200,100));
						} else {
							g.setColor(new Color(168,123,74));
						}
						drawTile(g,r,c,false);
					}
				}
			}
		}
		drawLines(places,g);
		finishDraw(g);
	}
	private int testWord() {
		if (words.indexOf(word)!=-1) {
			if (solutions.indexOf(word)!=-1) {
				return 1;
			} else {
				return 0;
			}
		} else {
			return 2;
		}
	}
	private void drawLines(ArrayList<int[]> a, Graphics g) {
		if (a.size()>=2) {
			for (int x1 = 1; x1<a.size(); x1++) {
				Color temp = g.getColor();
				Graphics2D g2 = (Graphics2D) g;
				float alpha = 0.75f;
				int type = AlphaComposite.SRC_OVER; 
				AlphaComposite composite = AlphaComposite.getInstance(type, alpha);
				g2.setComposite(composite);
				g.setColor(ALMOST_WHITE);
				g2.setStroke(new BasicStroke(10,BasicStroke.CAP_ROUND,BasicStroke.JOIN_MITER));
				g.drawLine(a.get(x1-1)[0], a.get(x1-1)[1], a.get(x1)[0], a.get(x1)[1]);
				g.setColor(temp);
			}
		}
	}
	private void finishDraw(Graphics g) {
		Color temp = g.getColor();
		g.setColor(new Color(70,70,70));
		if (word.length()<=5) {
			g.setFont(new Font("Avenir", Font.BOLD,44));
			g.drawString(word.toUpperCase(), 198, 780);
		} else if (word.length()<=6) {
			g.setFont(new Font("Avenir", Font.BOLD,39));
			g.drawString(word.toUpperCase(), 198, 780);
		} else if (word.length()<=7){
			g.setFont(new Font("Avenir", Font.BOLD,33));
			g.drawString(word.toUpperCase(), 198, 780);
		} else if (word.length()<=8) {
			g.setFont(new Font("Avenir", Font.BOLD,28));
			g.drawString(word.toUpperCase(), 198, 780);
		} else {
			g.setFont(new Font("Avenir", Font.BOLD,25));
			g.drawString(word.toUpperCase(), 198, 780);
		}
		g.setFont(new Font("Avenir", Font.BOLD,25));
		g.drawString("Score", 400, 730);
		g.drawString("Current Word", 200, 730);
		g.drawString("Words", 200, 850);
		g.drawString("Remaining", 400, 850);
		g.setFont(new Font("Avenir", Font.BOLD,50));
		g.drawString(Integer.toString(cscore), 400, 780);
		g.drawString(Integer.toString(numWords), 200, 900);
		g.drawString(Integer.toString(words2.size()), 400, 900);
		g.setColor(temp);
	}
	private void drawTile(Graphics g, int r, int c, boolean b) {
		Color temp = g.getColor();
		if (b) {
			g.fillRoundRect(193+r*100, 193+c*100, 70, 70, 10, 10);
		} else 
			g.fillRoundRect(188+r*100, 188+c*100, 80, 80, 10, 10);
		g.setColor(Color.BLACK);
		char t = (board[r][c]);
		if (t == 'i') {
			g.drawString(Character.toString(t).toUpperCase(), 220+r*100, 250+c*100);
		} else if (t == 'w' || t == 'm') {
			g.drawString(Character.toString(t).toUpperCase(), 205+r*100, 250+c*100);
		} else if (t == 'o'||t == 'q'||t == 'c'|| t == 'g') {
			g.drawString(Character.toString(t).toUpperCase(), 207+r*100, 250+c*100);
		} else if (t == 'j') {
			g.drawString(Character.toString(t).toUpperCase(), 215+r*100, 250+c*100);
		} else if (t == 'n'|| t == 'a') {
			g.drawString(Character.toString(t).toUpperCase(), 210+r*100, 250+c*100);
		} else
			g.drawString(Character.toString(t).toUpperCase(), 213+r*100, 250+c*100);
		g.setColor(temp);

	}
	private void setup(Graphics g) {
		g.setColor(new Color(122,167,122));
		g.fillRect(0, 0, 800, 1200);
		g.setColor(new Color(204,204,224));
		g.fillRoundRect(190, 700, 180, 100, 10,10);
		g.fillRoundRect(390, 700, 180, 100, 10,10);
		g.fillRoundRect(220, 600, 305, 50, 20, 20);
		g.fillRoundRect(190, 820, 180, 100, 10,10);
		g.fillRoundRect(390, 820, 180, 100, 10,10);
		g.setColor(new Color(196,91,71));
		g.fillRoundRect(190, 940, 180, 50, 10, 10);
		g.setColor(new Color(138,197,87));
		g.fillRoundRect(390, 940, 180, 50, 10, 10);
		g.setColor(new Color(200,200,200));
		g.fillRoundRect(175, 175, 405, 405,10,10);
		g.setColor(new Color(70,70,70));
		g.setFont(new Font("Avenir", Font.BOLD,36));
		g.drawString("Solutions", 405, 978);
		g.setFont(new Font("Avenir", Font.BOLD,40));
		g.drawString("Reset", 225, 980);
		g.setColor(new Color(189,244,188));
		g.drawString("Drag your mouse to make words", 100, 1050);
		g.setFont(new Font("Avenir", Font.BOLD,70));
		g.drawString("Word Hunt", 205, 150);
		g.setFont(new Font("Avenir", Font.BOLD,50));
	}
	private void solClick() {
		initialized = false;
		repaint();
		words2.clear();
		words.clear();
		solutions.clear();
		xc = 0; yc = 0;
	}
	private void resetClick() {
		running = false;
		repaint();
		xc = 0; yc = 0;
	}
	private void testWord(Graphics g) {
		boolean qw = false;
		boolean valid = false;
		boolean ft = true;
		if ((xc>190&&xc<190+180)&&(yc>940&&yc<990)) {
			this.solClick();
			return;
		} else if ((xc>390&&xc<390+180)&&(yc>940&&yc<990)){
			this.resetClick();
			return;
		}
		String output = word.toUpperCase();
		g.setColor(new Color(168,123,74));
		if (word.length()>=3) {
			if (words.indexOf(word)!=-1) {
				for (int a = 0; a<solutions.size(); a++) {
					if (word.equals(solutions.get(a))) {
						qw = true;
						if (ft) {
							valid = true;
							output+=" Already Used!";
							ft = false;
						}
					}
				}
				if (!qw) {
					cscore+=this.point(word);
					if (ft) {
						valid = true;
						output+="+"+this.point(word)+" Points!";
						ft = false;
					}
					solutions.add(word);
					//complete = true;
				} 
			} else {
				tested = 0;
			}
		}
		for (int r1 = 0; r1<4; r1++) {
			for (int c1 = 0; c1<4; c1++) {
				used[r1][c1] = false;
			}
		}
		g.setColor(Color.black);
		if (fi) {
			g.setColor(Color.black);
			g.setFont(new Font("Avenir", Font.BOLD,22));
			g.drawString("Welcome to Word Hunt", 250, 635);
			valid = true;
			tested = 1;
			fi = false;
		} else if (!valid&&tested==0||(word.length()<3&&!word.isEmpty())) {
			g.setFont(new Font("Avenir", Font.BOLD,25));
			if (word.length()==2&&!word.isEmpty()) {
				g.drawString("Word too short!", 280, 635);
			} else 
				g.drawString("Not a valid word", 280, 635);
			tested = 1;
		} else {
			if (output.length()<16) {
				g.setFont(new Font("Avenir", Font.BOLD,28));
				g.drawString(output, 267, 635);
			} else if (output.length()<17) {
				g.setFont(new Font("Avenir", Font.BOLD,27));
				g.drawString(output, 255, 635);
			} else if (output.length()<18) {
				g.setFont(new Font("Avenir", Font.BOLD,27));
				g.drawString(output, 254, 635);
			} else if (output.length()<19) {
				g.setFont(new Font("Avenir", Font.BOLD,26));
				g.drawString(output, 250, 635);
			} else if (output.length()<20) {
				g.setFont(new Font("Avenir", Font.BOLD,25));
				g.drawString(output, 245, 635);
				g.setFont(new Font("Avenir", Font.BOLD,50));
			} else {
				g.setFont(new Font("Avenir", Font.BOLD,25));
				g.drawString(output, 240, 635);
				g.setFont(new Font("Avenir", Font.BOLD,50));
			}
			words2.remove(word);
			numWords = solutions.size();
		}
		g.setFont(new Font("Avenir", Font.BOLD,50));
		g.setColor(new Color(168,123,74));
		word = "";
	} 
	private void init() {
		WordHunt b = new WordHunt();
		words = b.solve();
		while (b.point(words)<=20000){
			b = new WordHunt();
			words = b.solve();
		}
		l = words.size();
		words2.addAll(words);
	}
	public ArrayList<String> solve() {
		ArrayList<String> answers = new ArrayList<>();
		try {
			Scanner in = new Scanner(new File("Lab23_SF/dictionary.txt"));
			while (in.hasNext()) {
				String temp = in.next().toLowerCase();
				if (temp.length()>=3&&temp.length()<=Math.pow(SIZE, 2)) {
					if (this.findWord(temp.toLowerCase())) {
						answers.add(temp);
					}
				}
			}
			in.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return answers;
	}
	public boolean findWord(String word) {
		for (int r = 0; r < board.length; r++) {
			for (int c = 0; c < board.length; c++) {
				if (this.findWord(word, r, c)) {
					return true;
				}
			}
		}
		return false;
	}
	private boolean findWord(String word, int row, int col) {
		if (word.equals("")) {
			return true;
		}
		else if (row < 0 || row >= this.board.length || 
				col < 0 || col >= this.board.length || 
				this.board[row][col] != word.charAt(0)) {
			return false;
		}
		else {
			char curr = this.board[row][col];
			this.board[row][col] = '*';
			String rest = word.substring(1, word.length());
			boolean result = this.findWord(rest, row-1, col-1) ||
					this.findWord(rest, row-1, col) ||
					this.findWord(rest, row-1, col+1) ||
					this.findWord(rest, row, col-1) ||
					this.findWord(rest, row, col+1) ||
					this.findWord(rest, row+1, col-1) ||
					this.findWord(rest, row+1, col) ||
					this.findWord(rest, row+1, col+1);
			this.board[row][col] = curr;
			return result;
		}
	}
	public String toString() {
		String str = "";
		for (int r = 0; r < board.length; r++) {
			for (char ch : board[r]) {
				str += ch + " ";
			}
			if (r < board.length-1) { 
				str += "\n"; 
			}
		}
		return str;
	}
	public int point(ArrayList<String> a) {
		int total = 0;
		for (int x = 0; x < a.size(); x++) {
			total+=values[a.get(x).length()-3];
		}
		return total;
	}
	public int point(String a) {
		int total = 0;
		total+=values[a.length()-3];
		return total;
	}
	public void mouseDragged(MouseEvent e) {
		int tempx = e.getX();
		int tempy = e.getY();
		if ((tempx<175||tempx>175+405)||(tempy<175||tempy>405+175)) {
			mouseLoc = null;
		} else 
			mouseLoc = toLocation(e);
		repaint();
	}
	@Override
	public void mouseMoved(MouseEvent e) {}
	private int[] toLocation(MouseEvent e)
	{
		int[] loc = new int[2];
		loc[0] = e.getX();
		loc[1] = e.getY();
		x = loc[0];
		y = loc[1];
		return loc;
	}
	public void mouseClicked(MouseEvent e) {
		xc = e.getX();
		yc = e.getY();
	}
	public void mousePressed(MouseEvent e) { 
		mouseLoc = toLocation(e); 
		repaint();
	}
	@Override
	public void mouseReleased(MouseEvent e) {
		mouseLoc = null; 
		repaint();
	}
	@Override
	public void mouseEntered(MouseEvent e) {}
	@Override
	public void mouseExited(MouseEvent e) {}
}
